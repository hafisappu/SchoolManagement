@using System
@using System.Linq
@using SchoolManage.Data
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject IStandardService StandardService
@inject MudBlazor.ISnackbar snackBar

<MudDialog Elevation="25">
    <DialogContent>
        <EditForm OnValidSubmit="AddStandard" Model="@standard">
            <DataAnnotationsValidator />
            <MudTextField @bind-Value=standard.StandardName Label="Standard" Required="true">
                <ValidationMessage For="@(() => standard.StandardName)" />
            </MudTextField>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="@((editMode) ? Color.Warning : Color.Info)" Variant="Variant.Filled" OnClick="AddStandard">
            @((editMode) ? "Update Standard" : "Add Standard")
        </MudButton>
    </DialogActions>
</MudDialog>
<br />

@code {

    private string searchString = "";
    private Standard standard = new Standard();
    private List<Standard> standards = new List<Standard>();
    private bool editMode = false;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        standards = await GetStandardsAsync();
    }

    private async Task<List<Standard>> GetStandardsAsync()
    {
        return await StandardService.GetStandards();
    }


    private List<Standard> GetStandards()
    {
        return standards;
    }

    private async Task AddStandard()
    {
        var validationContext = new ValidationContext(standard, serviceProvider: null, items: null);
        var validationResults = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(standard, validationContext, validationResults, true);

        if (isValid)
        {
            if (!editMode)
            {
                // Check for duplicate Standard names
                bool isDuplicate = standards.Any(s => s.StandardName.Equals(standard.StandardName, StringComparison.OrdinalIgnoreCase));
                if (isDuplicate)
                {
                    snackBar.Add("Standard with this name already exists", Severity.Error);
                    return;
                }

                await StandardService.AddStandard(standard);
                snackBar.Add("Standard Added", Severity.Success);
                standard = new Standard();
                MudDialog.Close();
                standards = await GetStandardsAsync();
            }
            else
            {
                await Update(standard);
                standard = new Standard();
                editMode = false;
            }
        }
        else
        {
            foreach (var validationResult in validationResults)
            {
                snackBar.Add(validationResult.ErrorMessage, Severity.Warning);
            }
        }
    }





    private async Task Update(Standard standard)
    {
        var validationContext = new ValidationContext(standard, serviceProvider: null, items: null);
        var validationResults = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(standard, validationContext, validationResults, true);

        if (isValid)
        {
            // Check for duplicate Standard names
            bool isDuplicate = standards.Any(s => s.StandardId != standard.StandardId && s.StandardName.Equals(standard.StandardName, StringComparison.OrdinalIgnoreCase));
            if (isDuplicate)
            {
                snackBar.Add("Standard with this name already exists", Severity.Error);
                return;
            }

            await StandardService.UpdateStandard(standard);
            standards = await StandardService.GetStandards();
            snackBar.Add("Standard updated successfully", Severity.Success);
        }
        else
        {
            foreach (var validationResult in validationResults)
            {
                snackBar.Add(validationResult.ErrorMessage, Severity.Error);
            }
        }
    }


}